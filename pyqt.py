# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'subas.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import configparser
import os
import subprocess
import sys
from os.path import isfile, join
from os import listdir
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont
from PyQt5.QtCore import QThread, pyqtSignal, QMutex, QMetaObject
from PyQt5.QtWidgets import QApplication, QHeaderView, QTableWidgetItem, QAbstractItemView, QFontDialog
from win32comext.shell import shell, shellcon

inipath = os.path.join(os.getcwd(), "config.ini")
from toollog import logger

qmut_1 = QMutex()

"""
高亮
"""
class HighlightDelegate(QtWidgets.QStyledItemDelegate):
    def __init__(self, parent=None):
        super(HighlightDelegate, self).__init__(parent)
        self._filters = []
        self._wordwrap = False
        self.doc = QtGui.QTextDocument(self)

    def paint(self, painter, option, index):
        painter.save()
        options = QtWidgets.QStyleOptionViewItem(option)
        self.initStyleOption(options, index)
        self.doc.setPlainText(options.text)
        self.apply_highlight()

        if self._wordwrap:
            self.doc.setTextWidth(options.rect.width())
        options.text = ""

        style = QApplication.style() if options.widget is None else options.widget.style()
        style.drawControl(QtWidgets.QStyle.CE_ItemViewItem, options, painter)

        if self._wordwrap:
            painter.translate(options.rect.left(), options.rect.top())
            clip = QtCore.QRectF(QtCore.QPointF(), QtCore.QSizeF(options.rect.size()))
            self.doc.drawContents(painter, clip)
        else:
            ctx = QtGui.QAbstractTextDocumentLayout.PaintContext()
            if option.state & QtWidgets.QStyle.State_Selected:
                ctx.palette.setColor(QtGui.QPalette.Text, option.palette.color(
                    QtGui.QPalette.Active, QtGui.QPalette.HighlightedText))
            else:
                ctx.palette.setColor(QtGui.QPalette.Text, option.palette.color(
                    QtGui.QPalette.Active, QtGui.QPalette.Text))
            textRect = style.subElementRect(QtWidgets.QStyle.SE_ItemViewItemText, options, None)
            if index.column() != 0:
                textRect.adjust(5, 0, 0, 0)
            constant = 4
            margin = (option.rect.height() - options.fontMetrics.height()) // 2
            margin = margin - constant
            textRect.setTop(textRect.top() + margin)
            painter.translate(textRect.topLeft())
            painter.setClipRect(textRect.translated(-textRect.topLeft()))
            self.doc.documentLayout().draw(painter, ctx)

        painter.restore()
        s = QtCore.QSize(int(self.doc.idealWidth()), int(self.doc.size().height()))
        index.model().setData(index, s, QtCore.Qt.SizeHintRole)

    def apply_highlight(self):
        cursor = QtGui.QTextCursor(self.doc)
        cursor.beginEditBlock()
        fmt = QtGui.QTextCharFormat()
        fmt.setForeground(QtCore.Qt.red)
        for f in self.filters():
            highlightCursor = QtGui.QTextCursor(self.doc)
            while not highlightCursor.isNull() and not highlightCursor.atEnd():
                highlightCursor = self.doc.find(f, highlightCursor)
                if not highlightCursor.isNull():
                    highlightCursor.mergeCharFormat(fmt)
        cursor.endEditBlock()

    @QtCore.pyqtSlot(list)
    def setFilters(self, filters):
        if self._filters == filters: return
        self._filters = filters
        self.parent().viewport().update()

    def filters(self):
        return self._filters

    def setWordWrap(self, on):
        self._wordwrap = on
        mode = QtGui.QTextOption.WrapAnywhere if on else QtGui.QTextOption.WrapAtWordBoundaryOrAnywhere
        textOption = QtGui.QTextOption(self.doc.defaultTextOption())
        textOption.setWrapMode(mode)
        self.doc.setDefaultTextOption(textOption)
        self.parent().viewport().update()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(729, 473)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_5.addWidget(self.label_2)
        self.filepathEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.filepathEdit.setMinimumSize(QtCore.QSize(240, 0))
        self.filepathEdit.setObjectName("filepathEdit")
        self.horizontalLayout_5.addWidget(self.filepathEdit)
        self.filepathrexBox = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.filepathrexBox.sizePolicy().hasHeightForWidth())
        self.filepathrexBox.setSizePolicy(sizePolicy)
        self.filepathrexBox.setMinimumSize(QtCore.QSize(45, 0))
        self.filepathrexBox.setMaximumSize(QtCore.QSize(80, 16777215))
        self.filepathrexBox.setEditable(True)
        self.filepathrexBox.setObjectName("filepathrexBox")
        self.horizontalLayout_5.addWidget(self.filepathrexBox)
        self.filetypeBox = QtWidgets.QComboBox(self.centralwidget)
        self.filetypeBox.setMinimumSize(QtCore.QSize(45, 0))
        self.filetypeBox.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.filetypeBox.setEditable(True)
        self.filetypeBox.setObjectName("filetypeBox")
        self.filetypeBox.addItem("")
        self.filetypeBox.addItem("")
        self.horizontalLayout_5.addWidget(self.filetypeBox)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.subCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.subCheckBox.setObjectName("subCheckBox")
        self.horizontalLayout_6.addWidget(self.subCheckBox)
        self.subpathEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.subpathEdit.setMinimumSize(QtCore.QSize(230, 0))
        self.subpathEdit.setObjectName("subpathEdit")
        self.horizontalLayout_6.addWidget(self.subpathEdit)
        self.subpathrexBox = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.subpathrexBox.sizePolicy().hasHeightForWidth())
        self.subpathrexBox.setSizePolicy(sizePolicy)
        self.subpathrexBox.setMinimumSize(QtCore.QSize(45, 0))
        self.subpathrexBox.setMaximumSize(QtCore.QSize(80, 16777215))
        self.subpathrexBox.setEditable(True)
        self.subpathrexBox.setObjectName("subpathrexBox")
        self.horizontalLayout_6.addWidget(self.subpathrexBox)
        self.subfiletypeBox = QtWidgets.QComboBox(self.centralwidget)
        self.subfiletypeBox.setMinimumSize(QtCore.QSize(45, 0))
        self.subfiletypeBox.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.subfiletypeBox.setEditable(True)
        self.subfiletypeBox.setObjectName("subfiletypeBox")
        self.subfiletypeBox.addItem("")
        self.subfiletypeBox.addItem("")
        self.horizontalLayout_6.addWidget(self.subfiletypeBox)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.audioCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.audioCheckBox.setObjectName("audioCheckBox")
        self.horizontalLayout_7.addWidget(self.audioCheckBox)
        self.audiopathEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.audiopathEdit.setMinimumSize(QtCore.QSize(230, 0))
        self.audiopathEdit.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.audiopathEdit.setObjectName("audiopathEdit")
        self.horizontalLayout_7.addWidget(self.audiopathEdit)
        self.audiopathrexBox = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.audiopathrexBox.sizePolicy().hasHeightForWidth())
        self.audiopathrexBox.setSizePolicy(sizePolicy)
        self.audiopathrexBox.setMinimumSize(QtCore.QSize(45, 0))
        self.audiopathrexBox.setMaximumSize(QtCore.QSize(80, 16777215))
        self.audiopathrexBox.setEditable(True)
        self.audiopathrexBox.setObjectName("audiopathrexBox")
        self.horizontalLayout_7.addWidget(self.audiopathrexBox)
        self.audiofiletypeBox = QtWidgets.QComboBox(self.centralwidget)
        self.audiofiletypeBox.setMinimumSize(QtCore.QSize(45, 0))
        self.audiofiletypeBox.setEditable(True)
        self.audiofiletypeBox.setObjectName("audiofiletypeBox")
        self.audiofiletypeBox.addItem("")
        self.audiofiletypeBox.addItem("")
        self.horizontalLayout_7.addWidget(self.audiofiletypeBox)
        self.verticalLayout.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.nameButton = QtWidgets.QRadioButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.nameButton.sizePolicy().hasHeightForWidth())
        self.nameButton.setSizePolicy(sizePolicy)
        self.nameButton.setMinimumSize(QtCore.QSize(0, 0))
        self.nameButton.setObjectName("nameButton")
        self.horizontalLayout_2.addWidget(self.nameButton)
        self.episodeButton = QtWidgets.QRadioButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.episodeButton.sizePolicy().hasHeightForWidth())
        self.episodeButton.setSizePolicy(sizePolicy)
        self.episodeButton.setMinimumSize(QtCore.QSize(0, 0))
        self.episodeButton.setObjectName("episodeButton")
        self.horizontalLayout_2.addWidget(self.episodeButton)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setMaximumSize(QtCore.QSize(65, 16777215))
        self.label_5.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_2.addWidget(self.label_5)
        self.audioorderBox = QtWidgets.QComboBox(self.centralwidget)
        self.audioorderBox.setMinimumSize(QtCore.QSize(45, 0))
        self.audioorderBox.setMaximumSize(QtCore.QSize(45, 16777215))
        self.audioorderBox.setEditable(True)
        self.audioorderBox.setObjectName("audioorderBox")
        self.audioorderBox.addItem("")
        self.audioorderBox.addItem("")
        self.audioorderBox.addItem("")
        self.horizontalLayout_2.addWidget(self.audioorderBox)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.delCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.delCheckBox.setMinimumSize(QtCore.QSize(0, 0))
        self.delCheckBox.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.delCheckBox.setObjectName("delCheckBox")
        self.horizontalLayout_8.addWidget(self.delCheckBox)
        self.renameCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.renameCheckBox.sizePolicy().hasHeightForWidth())
        self.renameCheckBox.setSizePolicy(sizePolicy)
        self.renameCheckBox.setMinimumSize(QtCore.QSize(0, 0))
        self.renameCheckBox.setObjectName("renameCheckBox")
        self.horizontalLayout_8.addWidget(self.renameCheckBox)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setMinimumSize(QtCore.QSize(0, 0))
        self.label_4.setMaximumSize(QtCore.QSize(65, 16777215))
        self.label_4.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_8.addWidget(self.label_4)
        self.seasonBox = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.seasonBox.sizePolicy().hasHeightForWidth())
        self.seasonBox.setSizePolicy(sizePolicy)
        self.seasonBox.setMinimumSize(QtCore.QSize(45, 0))
        self.seasonBox.setMaximumSize(QtCore.QSize(45, 16777215))
        self.seasonBox.setAutoFillBackground(False)
        self.seasonBox.setEditable(True)
        self.seasonBox.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContentsOnFirstShow)
        self.seasonBox.setObjectName("seasonBox")
        self.seasonBox.addItem("")
        self.seasonBox.addItem("")
        self.seasonBox.addItem("")
        self.seasonBox.addItem("")
        self.seasonBox.addItem("")
        self.seasonBox.addItem("")
        self.seasonBox.addItem("")
        self.seasonBox.addItem("")
        self.seasonBox.addItem("")
        self.seasonBox.addItem("")
        self.horizontalLayout_8.addWidget(self.seasonBox)
        self.verticalLayout.addLayout(self.horizontalLayout_8)
        self.searchEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.searchEdit.setObjectName("searchEdit")
        self.verticalLayout.addWidget(self.searchEdit)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setMinimumSize(QtCore.QSize(400, 0))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.tableWidget.horizontalHeader().setVisible(False)
        self.verticalLayout.addWidget(self.tableWidget)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.deleButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.deleButton_2.setObjectName("deleButton_2")
        self.horizontalLayout_3.addWidget(self.deleButton_2)
        self.confirmButton = QtWidgets.QPushButton(self.centralwidget)
        self.confirmButton.setObjectName("confirmButton")
        self.horizontalLayout_3.addWidget(self.confirmButton)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_9.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget_2.setMinimumSize(QtCore.QSize(300, 87))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(4)
        self.tableWidget_2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(3, item)
        self.verticalLayout_2.addWidget(self.tableWidget_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.otherCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.otherCheckBox.setObjectName("otherCheckBox")
        self.horizontalLayout.addWidget(self.otherCheckBox)
        self.deleButton = QtWidgets.QPushButton(self.centralwidget)
        self.deleButton.setMinimumSize(QtCore.QSize(120, 0))
        self.deleButton.setObjectName("deleButton")
        self.horizontalLayout.addWidget(self.deleButton)
        self.insertButton = QtWidgets.QPushButton(self.centralwidget)
        self.insertButton.setMinimumSize(QtCore.QSize(120, 0))
        self.insertButton.setObjectName("insertButton")
        self.horizontalLayout.addWidget(self.insertButton)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_2.addWidget(self.label_3)
        self.CMDBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.CMDBrowser.setMinimumSize(QtCore.QSize(300, 235))
        self.CMDBrowser.setObjectName("CMDBrowser")
        self.verticalLayout_2.addWidget(self.CMDBrowser)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.checkButton = QtWidgets.QPushButton(self.centralwidget)
        self.checkButton.setObjectName("checkButton")
        self.horizontalLayout_4.addWidget(self.checkButton)
        self.startButton = QtWidgets.QPushButton(self.centralwidget)
        self.startButton.setObjectName("startButton")
        self.horizontalLayout_4.addWidget(self.startButton)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_9.addLayout(self.verticalLayout_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 729, 23))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action = QtWidgets.QAction(MainWindow)
        self.action.setObjectName("action")
        self.menu.addAction(self.action)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.setProp()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "字幕助手"))
        self.label.setText(_translate("MainWindow", "路径配置："))
        self.label_2.setText(_translate("MainWindow", "源文件："))
        self.filetypeBox.setItemText(0, _translate("MainWindow", "mkv"))
        self.filetypeBox.setItemText(1, _translate("MainWindow", "mp4"))
        self.subCheckBox.setText(_translate("MainWindow", "字幕："))
        self.subfiletypeBox.setItemText(0, _translate("MainWindow", "ass"))
        self.subfiletypeBox.setItemText(1, _translate("MainWindow", "srt"))
        self.audioCheckBox.setText(_translate("MainWindow", "音频："))
        self.audiofiletypeBox.setItemText(0, _translate("MainWindow", "mkv"))
        self.audiofiletypeBox.setItemText(1, _translate("MainWindow", "mka"))
        self.nameButton.setText(_translate("MainWindow", "按名字匹配"))
        self.episodeButton.setText(_translate("MainWindow", "按集数匹配"))
        self.label_5.setText(_translate("MainWindow", "音轨顺序："))
        self.audioorderBox.setItemText(0, _translate("MainWindow", "1"))
        self.audioorderBox.setItemText(1, _translate("MainWindow", "2"))
        self.audioorderBox.setItemText(2, _translate("MainWindow", "3"))
        self.delCheckBox.setText(_translate("MainWindow", "删除字幕并重命名"))
        self.renameCheckBox.setText(_translate("MainWindow", "按集重命名"))
        self.label_4.setText(_translate("MainWindow", "季："))
        self.seasonBox.setItemText(0, _translate("MainWindow", "1"))
        self.seasonBox.setItemText(1, _translate("MainWindow", "2"))
        self.seasonBox.setItemText(2, _translate("MainWindow", "3"))
        self.seasonBox.setItemText(3, _translate("MainWindow", "4"))
        self.seasonBox.setItemText(4, _translate("MainWindow", "5"))
        self.seasonBox.setItemText(5, _translate("MainWindow", "6"))
        self.seasonBox.setItemText(6, _translate("MainWindow", "7"))
        self.seasonBox.setItemText(7, _translate("MainWindow", "8"))
        self.seasonBox.setItemText(8, _translate("MainWindow", "9"))
        self.seasonBox.setItemText(9, _translate("MainWindow", "10"))
        self.deleButton_2.setText(_translate("MainWindow", "删除行"))
        self.confirmButton.setText(_translate("MainWindow", "确认修改"))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "类别"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "路径"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "命令"))
        item = self.tableWidget_2.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "检索方式"))
        self.otherCheckBox.setText(_translate("MainWindow", "其他"))
        self.deleButton.setText(_translate("MainWindow", "删除行"))
        self.insertButton.setText(_translate("MainWindow", "插入行"))
        self.label_3.setText(_translate("MainWindow", "结果输出："))
        self.checkButton.setText(_translate("MainWindow", "检查文件"))
        self.startButton.setText(_translate("MainWindow", "开始"))
        self.menu.setTitle(_translate("MainWindow", "菜单"))
        self.action.setText(_translate("MainWindow", "配置文件"))

    def setProp(self):
        # 以下代码将下拉框空间文本居中设置
        self.filepathrexBox.lineEdit().setAlignment(QtCore.Qt.AlignCenter)
        self.subpathrexBox.lineEdit().setAlignment(QtCore.Qt.AlignCenter)
        self.audiopathrexBox.lineEdit().setAlignment(QtCore.Qt.AlignCenter)
        self.seasonBox.lineEdit().setAlignment(QtCore.Qt.AlignCenter)
        self.audioorderBox.lineEdit().setAlignment(QtCore.Qt.AlignCenter)

        config = configparser.ConfigParser()
        config.read(inipath, encoding="utf-8")
        self.keywordlist = config["mkvmix"]["keyword"].split(',')
        self.mkvpath = '"' + config["mkvmix"]["mkvpath"] + '"'
        filepathrex = config["mkvmix"]["filepathrex"].replace(' ', '').split(',')
        subpathrex = config["mkvmix"]["subpathrex"].replace(' ', '').split(',')
        audiopathrex = config["mkvmix"]["audiopathrex"].replace(' ', '').split(',')

        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.renameCheckBox.stateChanged.connect(self.showLine)
        # self.delCheckBox.stateChanged.connect(self.chanStartButton)
        self.episodeButton.setChecked(True)
        self.startButton.setEnabled(False)
        self.confirmButton.setEnabled(False)

        # self.keywordlist = ['tc', 'cht']
        # self.mkvpath = '"' + 'E:\Program Files (x86)\MKVToolNix\mkvmerge.exe' + '"'

        self.tableWidget_2.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tableWidget_2.setSelectionMode(QAbstractItemView.SingleSelection)
        self.tableWidget_2.verticalHeader().setVisible(False)
        self.tableWidget_2.insertRow(0)
        self.tableWidget_2.setColumnWidth(0, 50)
        self.tableWidget_2.setColumnWidth(3, 60)
        self.tableWidget_2.horizontalHeader().setSectionResizeMode(0, QHeaderView.Stretch)
        # self.tableWidget_2.horizontalHeader().setSectionResizeMode(3, QHeaderView.Stretch)
        item_6 = QTableWidgetItem('其他')
        item_6.setTextAlignment(QtCore.Qt.AlignCenter)
        item_6.setFlags(QtCore.Qt.ItemIsEnabled)
        item_7 = QTableWidgetItem('[$]')
        item_7.setTextAlignment(QtCore.Qt.AlignCenter)
        self.tableWidget_2.setItem(0, 0, item_6)
        self.tableWidget_2.setItem(0, 3, item_7)
        self.tableWidget_2.cellClicked.connect(self.changeDelButton)    # 改变删除行
        self.insertButton.clicked.connect(self.instert)              # 插入
        self.deleButton.clicked.connect(self.tableDelete)
        self.checkButton.clicked.connect(self.check)
        self.startButton.clicked.connect(self.run)
        self.confirmButton.clicked.connect(self.confirmChange)
        self.renameCheckBox.clicked.connect(self.chanDelboxButton)
        self.deleButton_2.clicked.connect(self.tableDelete1)

        self.filepathrexBox.addItems(filepathrex)
        self.subpathrexBox.addItems(subpathrex)
        self.audiopathrexBox.addItems(audiopathrex)
        font = QFont("宋体")
        font.setPointSize(9)
        pointsize = font.pointSize()
        # font.setPixelSize(pointsize * 83 / 72)
        self.centralwidget.setFont(font)
        # fontDialog = QFontDialog(font, self.centralwidget)


    def showLine(self):
        if self.renameCheckBox.isChecked():
            self.CMDBrowser.append("请在字幕路径中输入剧名...")

    def chanStartButton(self):
        if self.delCheckBox.isChecked():
            self.startButton.setEnabled(True)
            self.renameCheckBox.setChecked(False)
        else:
            self.startButton.setEnabled(False)

    def chanDelboxButton(self):
        if self.renameCheckBox.isChecked():
            self.delCheckBox.setChecked(False)

    def changeDelButton(self, row):
        if row == 0:
            self.deleButton.setEnabled(False)
        else:
            self.deleButton.setEnabled(True)

    def instert(self):
        row = self.tableWidget_2.rowCount()
        self.tableWidget_2.insertRow(row)
        item = QTableWidgetItem('其他')
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        item.setFlags(QtCore.Qt.ItemIsEnabled)
        item_1 = QTableWidgetItem('[$]')
        item_1.setTextAlignment(QtCore.Qt.AlignCenter)
        item_2 = QTableWidgetItem(' ')
        self.tableWidget_2.setItem(row, 0, item)
        self.tableWidget_2.setItem(row, 3, item_1)
        self.tableWidget_2.setItem(row, 1, item_2)

    def otherComd(self, reslist):
        self.errflag = False
        otherlist = []
        self.row = self.tableWidget_2.rowCount()

        otherdict = {'filepath': '',
                     'filepathrex': '',
                     'command': '',
                     }
        for i in range(self.row):
            for j in range(1, 4):
                if self.tableWidget_2.item(i, j) is None:
                    self.errflag = True
                    break
        if not self.errflag:
            for i in range(self.row):
                for j in range(1, 3):
                    if self.tableWidget_2.item(i, j).text() == '':
                        self.errflag = True
        if not self.errflag:
            for i in range(self.row):
                otherdict.update({'filepath': self.tableWidget_2.item(i, 1).text(),
                                  'filepathrex': self.tableWidget_2.item(i, 3).text(),
                                  'command': self.tableWidget_2.item(i, 2).text()})

                otherlist.append(otherdict.copy())
                self.otherfilepath = otherdict['filepath']
                self.otherfilerex = otherdict['filepathrex']
                self.othercommand = otherdict['command']
                logger.info('otherComd: "otherfilepath":{}'.format(self.otherfilepath))
                if not os.path.isdir(self.otherfilepath):
                    self.errflag = True
            logger.info('otherComd: "otherlist":{}'.format(otherlist))
        if not self.errflag:
            for i, otherdict in enumerate(otherlist):
                otherfilelist = self.filter(self.path2list(otherdict['filepath'], '.mkv'), self.keywordlist)
                reslist = self.gettogether(reslist, otherfilelist, 'otherfile' + str(i), otherdict['filepath'], self.filerex,
                                           self.otherfilerex)
            for filedict in reslist:
                for i, otherdict in enumerate(otherlist):
                    filedict.update({'othercommand' + str(i): otherdict['command']})

            logger.info('otherComd: "reslist-1":{}'.format(reslist))
            return reslist
        else:
            self.CMDBrowser.append("请输入其他表格中空白")
            self.errflag = True

    def subComd(self, reslist):
        self.errflag = False
        logger.info('subComd: "reslist":{}'.format(reslist))
        self.subpath = self.subpathEdit.text()
        if os.path.isdir(self.subpath):
            self.subpathrex = self.subpathrexBox.currentText()
            self.subfiletype = '.'+self.subfiletypeBox.currentText()
            if self.episodeButton.isChecked():
                if self.filerex == '':
                    self.CMDBrowser.clear()
                    self.CMDBrowser.append("文件检索方式为空，请使用按名字匹配")
                    self.errflag = True
                else:
                    logger.info('subComd: sub mode 1 (eposode)')
                    sublist = self.filter(self.path2list(self.subpath, self.subfiletype), self.keywordlist)
                    if len(sublist) == 0:
                        self.CMDBrowser.append("未找到{}格式文件".format(self.subfiletype))
                    reslist = self.gettogether(reslist, sublist, 'subname', self.subpath, self.filerex,
                                               self.subpathrex)
                    logger.info('subComd: "reslist":{}'.format(reslist))
            elif self.nameButton.isChecked():
                logger.info('subComd: sub mode 2 (name)')
                sublist = self.filter(self.path2list(self.subpath, self.subfiletype), self.keywordlist)
                if len(sublist) == 0:
                    self.CMDBrowser.append("未找到{}格式字幕".format(self.subfiletype))
                reslist = self.gettogether_1(reslist, sublist)
            if len(reslist) != 0 and not self.errflag:
                for filedict in reslist:
                    filedict.update({'subcommand': "--language 0:zh --default-track 0:yes"})
                logger.info('subComd: "reslist":{}'.format(reslist))
                return reslist
        else:
            self.CMDBrowser.append("输入字幕文件路径为空或非文件夹")
            self.errflag = True

    def audioComd(self, reslist):
        self.errflag = False
        self.audiopath = self.audiopathEdit.text()
        self.audiorex = self.audiopathrexBox.currentText()
        self.audioorder = self.audioorderBox.currentText()
        self.audiofiletype = self.audiofiletypeBox.currentText()
        if os.path.isdir(self.audiopath):
            logger.info('audioComd: sub&audio mode')
            audiolist = self.filter(self.path2list(self.audiopath, '.'+self.audiofiletype), self.keywordlist)
            if len(audiolist) == 0:
                self.CMDBrowser.append("未找到{}格式音轨".format(self.audiofiletype))
            reslist = self.gettogether(reslist, audiolist, 'audioname', self.audiopath,
                                       self.filerex, self.audiorex)

            self.CMDBrowser.clear()
            if len(reslist) != 0 and not self.errflag:
                for filedict in reslist:
                    filedict.update({"audiocommand": "--audio-tracks {} --no-video --no-subtitles --no-chapters --language 1:en".format(str(self.audioorder))})
                return reslist
        else:
            self.CMDBrowser.append("输入音轨文件路径为空或非文件夹")
            self.errflag = True

    def commandCombin(self):
        self.CMDBrowser.clear()
        self.errflag = False
        self.delmode = -1
        command = [self.mkvpath, "--ui-language zh_CN", "--output"]
        commandstrlist = []
        self.filepath = self.filepathEdit.text()
        self.filerex = self.filepathrexBox.currentText()
        self.filetype = self.filetypeBox.currentText()
        if os.path.isdir(self.filepath):
            filelist = self.filter(self.path2list(self.filepath, '.' + self.filetype), self.keywordlist)
            if len(filelist) == 0:
                self.errflag = True
                self.CMDBrowser.append("未找到{}格式视频".format(self.filetype))
            if not self.errflag:
                reslist = self.gettogether_2(filelist, self.filerex)
                if len(reslist) == 0:
                    self.CMDBrowser.append("未发现视频源，请检查匹配格式是否正确...")
                    return []
                else:
                    if self.subCheckBox.isChecked() and self.audioCheckBox.isChecked() and self.otherCheckBox.isChecked():
                        if not self.errflag:
                            reslist = self.subComd(reslist)
                            if not self.errflag:
                                reslist = self.audioComd(reslist)
                                if not self.errflag:
                                    reslist = self.otherComd(reslist)
                                    if not self.errflag:
                                        for filedict in reslist:
                                            othercommand = []
                                            otherstr = ''
                                            for i in range(self.row):
                                                othercommand = othercommand + [filedict['othercommand' + str(i)],
                                                                               filedict['otherfile' + str(i) + 'path']]
                                                otherstr = otherstr + '-->' + "other:" + filedict['otherfile' + str(i)]
                                            commandlist = command + [filedict['outputpathname'], filedict['filepathname'],
                                                                     filedict['subcommand'] +
                                                                     filedict['subnamepath'], filedict['audiocommand'],
                                                                     filedict['audionamepath']] + \
                                                          othercommand
                                            commandstrlist.append(commandlist)
                                            self.CMDBrowser.append(
                                                "source:{}--> sub:{}-->audio:{}{}".format(filedict['filename'],
                                                                                          filedict['subname'],
                                                                                          filedict['audioname'], otherstr))
                                        logger.info('commandCombin: sub&audio&other: "commandstrlist":{}'.format(commandstrlist))
                                        return commandstrlist

                    elif self.subCheckBox.isChecked() and self.audioCheckBox.isChecked() and not self.otherCheckBox.isChecked():
                        if not self.errflag:
                            reslist = self.subComd(reslist)
                            if not self.errflag:
                                reslist = self.audioComd(reslist)
                                if not self.errflag:
                                    for filedict in reslist:
                                        commandlist = command + [filedict['outputpathname'],
                                                                 filedict['filepathname'], filedict['subcommand'],
                                                                 filedict['subnamepath'], filedict['audiocommand'],
                                                                 filedict['audionamepath']]
                                        self.CMDBrowser.append(
                                            "source:{}--> sub:{}-->audio:{}".format(filedict['filename'],
                                                                                    filedict['subname'],
                                                                                    filedict['audioname']))
                                        commandstrlist.append(commandlist)
                                    logger.info('commandCombin: sub&audio: "commandstrlist":{}'.format(commandstrlist))
                                    return commandstrlist

                    elif self.subCheckBox.isChecked() and not self.audioCheckBox.isChecked() and not self.otherCheckBox.isChecked():
                        if not self.errflag:
                            reslist = self.subComd(reslist)
                            if not self.errflag:
                                for filedict in reslist:
                                    commandlist = command + [filedict['outputpathname'],
                                                             filedict['filepathname'], filedict['subcommand'],
                                                             filedict['subnamepath']]
                                    self.CMDBrowser.append(
                                        "source:{}--> sub:{}".format(filedict['filename'], filedict['subname'], ))
                                    commandstrlist.append(commandlist)
                                logger.info('commandCombin: sub: "commandstrlist":{}'.format(commandstrlist))
                                return commandstrlist

                    elif self.subCheckBox.isChecked() and not self.audioCheckBox.isChecked() and self.otherCheckBox.isChecked():
                        if not self.errflag:
                            reslist = self.subComd(reslist)
                            if not self.errflag:
                                reslist = self.otherComd(reslist)
                                if not self.errflag:
                                    self.CMDBrowser.clear()
                                    for filedict in reslist:
                                        othercommand = []
                                        otherstr = ''
                                        for i in range(self.row):
                                            othercommand = othercommand + [filedict['othercommand' + str(i)],
                                                                           filedict['otherfile' + str(i) + 'path']]
                                            otherstr = otherstr + '-->' + "other:" + filedict['otherfile' + str(i)]
                                        commandlist = command + [filedict['outputpathname'], filedict['filepathname'],
                                                                 filedict['subcommand'] +
                                                                 filedict['subnamepath']] + othercommand
                                        commandstrlist.append(commandlist)
                                        self.CMDBrowser.append(
                                            "source:{}--> sub:{}{}".format(filedict['filename'],
                                                                           filedict['subname'], otherstr))
                                    logger.info('commandCombin: sub&other: "commandstrlist":{}'.format(commandstrlist))
                                    return commandstrlist

                    elif not self.subCheckBox.isChecked() and self.audioCheckBox.isChecked() and self.otherCheckBox.isChecked():
                        if not self.errflag:
                            reslist = self.audioComd(reslist)
                            if not self.errflag:
                                reslist = self.otherComd(reslist)
                                if not self.errflag:
                                    for filedict in reslist:
                                        othercommand = []
                                        otherstr = ''
                                        for i in range(self.row):
                                            othercommand = othercommand + [filedict['othercommand' + str(i)],
                                                                           filedict['otherfile' + str(i) + 'path']]
                                            otherstr = otherstr + '-->' + "other:" + filedict['otherfile' + str(i)]
                                        commandlist = command + [filedict['outputpathname'], filedict['filepathname'],
                                                                 filedict['audiocommand'],
                                                                 filedict['audionamepath']] + othercommand
                                        commandstrlist.append(commandlist)
                                        self.CMDBrowser.append(
                                            "source:{}-->audio:{}{}".format(filedict['filename'],
                                                                            filedict['audioname'], otherstr))
                                    logger.info('commandCombin: audio&other: "commandstrlist":{}'.format(commandstrlist))
                                    return commandstrlist

                    elif not self.subCheckBox.isChecked() and not self.audioCheckBox.isChecked() and self.otherCheckBox.isChecked():
                        if not self.errflag:
                            reslist = self.otherComd(reslist)
                            if not self.errflag:
                                for filedict in reslist:
                                    othercommand = []
                                    otherstr = ''
                                    for i in range(self.row):
                                        othercommand = othercommand + [filedict['othercommand' + str(i)],
                                                                       filedict['otherfile' + str(i) + 'path']]
                                        otherstr = otherstr + '-->' + "other:" + filedict['otherfile' + str(i)]
                                    commandlist = command + othercommand
                                    commandstrlist.append(commandlist)
                                    self.CMDBrowser.append("source:{}{}".format(filedict['filename'], otherstr))
                                logger.info('commandCombin: other: "commandstrlist":{}'.format(commandstrlist))
                                return commandstrlist

                    elif not self.subCheckBox.isChecked() and self.audioCheckBox.isChecked() and not self.otherCheckBox.isChecked():
                        if not self.errflag:
                            reslist = self.audioComd(reslist)
                            if not self.errflag:
                                for filedict in reslist:
                                    commandlist = command + [filedict['outputpathname'], filedict['filepathname'],
                                                             filedict['audiocommand'], filedict['audionamepath']]
                                    commandstrlist.append(commandlist)
                                    self.CMDBrowser.append(
                                        "source:{}--> audio:{}".format(filedict['filename'], filedict['audioname']))
                                logger.info('commandCombin: audio: "commandstrlist":{}'.format(commandstrlist))
                                return commandstrlist
                    else:
                        if self.delCheckBox.isChecked():
                            self.delmode = 2
                        self.errflag = True
                        return []
        else:
            if self.delCheckBox.isChecked():
                self.delmode = 2
            self.errflag = True
            self.CMDBrowser.append("输入源文件路径为空或非文件夹")
            return []

    def showCommand(self, commandstrlist):
        logger.info('showCommand: commandstrlist:{}'.format(commandstrlist))
        self.tableWidget.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        self._delegate = HighlightDelegate(self.tableWidget)
        self.tableWidget.setItemDelegate(self._delegate)
        tablerow = len(commandstrlist)
        tablecol = len(commandstrlist[0])
        self.tableWidget.setColumnCount(tablecol)
        self.tableWidget.setRowCount(tablerow)
        QMetaObject.connectSlotsByName(self.searchEdit)
        for i, commandstr in enumerate(commandstrlist[0]):
            self.tableWidget.setColumnWidth(i, int(1/len(commandstr)*100)+len(commandstr)*5)
        self._delegate = HighlightDelegate(self.tableWidget)
        self.tableWidget.setItemDelegate(self._delegate)
        self.searchEdit.textChanged.connect(self.on_textChanged)
        words_in_columns = []
        for num in range(1, tablerow + 1):
            number = str(num).rjust(2, '0')
            words_in_columns.append(number)
        search_list = [word for word in words_in_columns]
        list_c_str = ' '.join(search_list)
        self.searchEdit.setText(list_c_str)
        for row, commandstr in enumerate(commandstrlist):
            for col, command in enumerate(commandstr):
                self.tableWidget.setItem(row, col, QTableWidgetItem(command))
        self._delegate.setWordWrap(True)
        self._delegate.setFilters(search_list)

    def showEpisodeInfo(self):
        self.errflag = False
        self.filepath = self.filepathEdit.text()
        self.filerex = self.filepathrexBox.currentText()
        self.season = self.seasonBox.currentText()
        logger.info('showEpisodeInfo: season: {}'.format(self.season))
        self.episodename = self.subpathEdit.text()
        if os.path.isdir(self.filepath):
            filelist = self.filter(self.path2list(self.filepath, '.mkv'), self.keywordlist)
            if len(filelist) == 0:
                self.errflag = True
                self.CMDBrowser.append("未发现mkv格式视频")
            if not self.errflag:
                reslist = self.gettogether_2(filelist, self.filerex)
                logger.info('showEpisodeInfo: reslist: {}'.format(reslist))
                if len(reslist) == 0:
                    self.CMDBrowser.append('未发现视频源，请检查匹配格式是否正确...')
                    self.errflag = True
                else:
                    episodelist = []
                    eposodlen = len(reslist)
                    episodealllist = []
                    rex = self.filepathrexBox.currentText()
                    for num in range(0, eposodlen + 10):
                        number = str(num).rjust(2, '0')
                        number_1 = rex.replace('$', number)
                        episodealllist.append(number_1)
                    for resdict in reslist:
                        for num, episode in enumerate(episodealllist):
                            if episode in resdict["filename"]:
                                number = str(num).rjust(2, '0')
                                resdict.update({'episode': number,
                                                'season': self.season})
                                break
                    logger.info('showEpisodeInfo: reslist: {}'.format(reslist))
                    rstlist = [item for item in reslist if 'season' in item]
                    logger.info('showCommand: showEpisodeInfo:{}'.format(rstlist))

                    for resdict in rstlist:
                        episodelist.append([self.episodename, resdict['filepathname'], str(resdict['season']), str(resdict['episode'])])
                    logger.info('showEpisodeInfo: episodelist:{}'.format(episodelist))
                    for i in episodelist:
                        showstr = i[0] + ' - ' + 'S' + i[2] + 'E' + i[3]+' - ' + i[1]
                        self.CMDBrowser.append(showstr)
                    return episodelist

    def on_textChanged(self, text):
        self._delegate.setFilters(list(set(text.split())))

    def confirmChange(self):
        self.CMDBrowser.clear()
        commandstrlist = []
        col = self.tableWidget.columnCount()
        row = self.tableWidget.rowCount()
        self.errflag = False
        for i in range(row):
            for j in range(col):
                if self.tableWidget.item(i, j) is None:
                    self.CMDBrowser.append("表格为空，请确认表格")
                    self.errflag = True
                    break
        if not self.errflag:
            for i in range(row):
                for j in range(col):
                    if self.tableWidget.item(i, j).text() == '':
                        self.CMDBrowser.append("表格为空，请确认表格")
                        self.errflag = True
        if not self.errflag:
            for i in range(row):
                commandlist = []
                for j in range(col):
                    commandlist.append(self.tableWidget.item(i, j).text())
                commandstrlist.append(commandlist)
            self.CMDBrowser.append("确认修改成功!")
            if self.renameCheckBox.isChecked():
                for i in commandstrlist:
                    showstr = i[0] + ' - ' + 'S' + i[2] + 'E' + i[3]+' - ' + i[1]
                    self.CMDBrowser.append(showstr)

            else:
                showstralllist = []
                for i in commandstrlist:
                    showstrlist = []
                    for j in i:
                        if '.mkv' in j or '.ass' in j:
                            j1 = j.split('\\')[-1]
                            showstrlist.append(j1)
                    showstralllist.append(showstrlist)
                for i in showstralllist:
                    str = ''
                    for j in i:
                        j = " --> " + j
                        str = str + j
                    self.CMDBrowser.append(str)
            self.confirmflag = True
            self.commandstrlist = commandstrlist
        else:
            self.errflag = False
            # self.commandstrlist = []
    """
    :删除other行
    """
    def tableDelete(self):
        r = self.tableWidget_2.selectionModel().selectedRows()
        if r:  # 下面删除时，选中多行中的最后一行，会被删掉；不选中，则默认第一行删掉
            index = self.tableWidget_2.currentIndex()
            self.tableWidget_2.removeRow(index.row())

    def tableDelete1(self):
        r = self.tableWidget.selectionModel().selectedRows()
        if r:  # 下面删除时，选中多行中的最后一行，会被删掉；不选中，则默认第一行删掉
            index = self.tableWidget.currentIndex()
            self.tableWidget.removeRow(index.row())
            row = self.tableWidget.rowCount()
            if row == 0:
                self.confirmButton.setEnabled(False)
            else:
                self.confirmButton.setEnabled(True)

    def check(self):
        self.confirmflag = False
        self.CMDBrowser.append("开始检查...")
        self.confirmButton.setEnabled(True)
        if self.renameCheckBox.isChecked():
            self.delmode = -1
            if self.subpathEdit.text() != '':
                logger.info('check: renamemode')
                episodelist = self.showEpisodeInfo()
                logger.info('check: episodelist:{}'.format(episodelist))
                if not self.errflag:
                    self.startButton.setEnabled(True)
                    self.showCommand(episodelist)
                    return episodelist
            else:
                self.CMDBrowser.append("剧名为空，请在字幕路径中输入...")
        else:
            commandstrlist = self.commandCombin()
            if self.delmode == 2:
                alllist = []
                self.subfiletype = self.subfiletypeBox.currentText()
                onlyfiles = [f for f in listdir(self.filepath) if isfile(join(self.filepath, f))]
                if len(onlyfiles) != 0:
                    for file in onlyfiles:
                        if " (1).mkv" in file:
                            alllist.append(file)
                            removefile = file.replace(' (1)', '')
                            self.CMDBrowser.append(file + ' --> ' + removefile)
                    for file in onlyfiles:
                        if "." + self.subfiletype in file:
                            alllist.append(file)
                            self.CMDBrowser.append(file)
                    if len(alllist) != 0:
                        self.startButton.setEnabled(True)
                    else:
                        self.CMDBrowser.append('未找能可以删除和重命名文件...')
                else:
                    self.CMDBrowser.append('未找到文件...')
            else:
                logger.info('check: mixmode')
                if not self.errflag and len(commandstrlist) != 0:
                    self.showCommand(commandstrlist)
                    self.startButton.setEnabled(True)
                return commandstrlist

    def run(self):
        if self.confirmflag:
            commandall = self.commandstrlist
        else:
            commandall = self.check()
        # self.commandstrlist = self.check()
            logger.info('run: commandstrlist: {}'.format(commandall))
        self.filepath = self.filepathEdit.text()
        commandstrlist = []
        self.subfiletype = '.' + self.subfiletypeBox.currentText()
        if self.delmode == 2:
            self.t1 = Starthread(commandstrlist=commandstrlist, filepath=self.filepath, subfiletype=self.subfiletype, mode=self.delmode)
            self.t1._signal.connect(self.set_btn)
            self.t1.start()
            self.t1.trigger.connect(self.display)
        else:
            if not self.errflag:
                for commandlist in commandall:
                    commandstr = self.command_p(commandlist)
                    commandstrlist.append(commandstr)
                if self.delCheckBox.isChecked():
                    self.delmode = 1
                elif self.renameCheckBox.isChecked():
                    self.delmode = 3
                else:
                    self.delmode = 0
                self.startButton.setEnabled(False)
                self.checkButton.setEnabled(False)
                if self.delmode == 0 or self.delmode == 1:
                    self.t1 = Starthread(commandstrlist=commandstrlist, filepath=self.filepath, subfiletype=self.subfiletype,  mode=self.delmode, )
                    self.t1._signal.connect(self.set_btn)
                    self.t1.start()
                    self.t1.trigger.connect(self.display)
                if self.delmode == 3:
                    self.t1 = Starthread(commandstrlist=commandall, filepath=self.filepath, subfiletype=self.subfiletype, mode=self.delmode)
                    self.t1._signal.connect(self.set_btn)
                    self.t1.start()
                    self.t1.trigger.connect(self.display)

        logger.info('run: delmode:{}'.format(self.delmode))

    def display(self, str):
        self.CMDBrowser.append(str)
        self.CMDBrowser.update()

    def set_btn(self):
        self.checkButton.setEnabled(True)

    def command_p(self, cmdlist):
        str1 = ''
        for i in cmdlist:
            str1 = str1 + ' ' + i
            str1 = str1.strip()
        return str1

    def path2list(self, path, type):
        onlyfiles = [f for f in listdir(path) if isfile(join(path, f))]
        filelist = [f for f in onlyfiles if f.endswith(type)]
        return filelist
    """
    文件过滤
    """
    def filter(self, onlyfiles, keyword):
        filterlist = []
        for i in onlyfiles:
            if self.filter_1(i, keyword):
                continue
            filterlist.append(i)
        # print("filterlist", filterlist)
        return filterlist
    """
    关键字过滤
    """
    def filter_1(self, str, keyword):
        for i in keyword:
            if i == '':
                continue
            if i in str:
                return True
        return False

    """
    按集数
    :rstlist: 
    """
    def gettogether(self, rstlist, filelist, rstname, rstpath, rex, rex_1):
        logger.info('gettogether: "rstlist":{}'.format(rstlist))
        logger.info('gettogether: "filelist":{}'.format(filelist))
        logger.info('gettogether: "rstpath":{}'.format(rstpath))
        allnum = len(rstlist)
        countrstfile = 0
        for num in range(1, allnum + 1):
            number = str(num).rjust(2, '0')
            number_1 = rex.replace('$', number)
            for filedict in rstlist:
                if number_1 in filedict['filename']:
                    filepathname = os.path.join(self.filepath, filedict['filename'])
                    filepathname = '"' + filepathname + '"'
                    filedict.update({'filepathname': filepathname})
                    number_2 = rex_1.replace('$', number)
                    for file in filelist:
                        if number_2 in file:
                            rst = file
                            filedict.update({rstname: file})
                            rst = os.path.join(rstpath, rst)
                            rst = '"' + rst + '"'
                            filedict.update({rstname+'path': rst})
                            countrstfile += 1
                            break
                    break
        rstlist = [item for item in rstlist if rstname in item]
        if countrstfile == 0:
            self.errflag = True
            self.CMDBrowser.clear()
            self.CMDBrowser.append('未能匹配到{}文件，请检查检索方式是否正确'.format(rstname))
        return rstlist

    """
    按名字
    """
    def gettogether_1(self, rstlist, sublist):
        countrstfile = 0
        for filedict in rstlist:
            filename = filedict['filename'].replace('.mkv', '')
            for sub in sublist:
                if filename in sub:
                    countrstfile += 1
                    subname = sub
                    subnamepath = os.path.join(self.subpath, subname)
                    subnamepath = '"' + subnamepath + '"'
                    filedict.update({'subname': sub,
                                'subnamepath': subnamepath})

                    break
        rstlist = [item for item in rstlist if 'subnamepath' in item]

        if countrstfile == 0:
            self.errflag = True
            self.CMDBrowser.clear()
            self.CMDBrowser.append('未能匹配到subname文件，请检查检索方式是否正确')
        return rstlist

    """
    处理源文件
    """
    def gettogether_2(self, filelist, rex):
        reslist = []
        allnum = len(filelist)
        res = {'filename': 'Na',
               'filepathname': 'Na',
               'outputpathname': 'Na'
               }
        if rex == '':
            for file in filelist:
                filepathname = os.path.join(self.filepath, file)
                filepathname = '"' + filepathname + '"'
                outputname = file.replace('.mkv', ' (1).mkv')
                outputpathname = os.path.join(self.filepath, outputname)
                outputpathname = '"' + outputpathname + '"'
                res.update({'filename': file,
                            'filepathname': filepathname,
                            'outputpathname': outputpathname})
                reslist.append(res.copy())
        else:
            for num in range(1, allnum + 1):
                number = str(num).rjust(2, '0')
                number_1 = rex.replace('$', number)
                for file in filelist:
                    if number_1 in file:
                        filepathname = os.path.join(self.filepath, file)
                        filepathname = '"' + filepathname + '"'
                        outputname = file.replace('.mkv', ' (1).mkv')
                        outputpathname = os.path.join(self.filepath, outputname)
                        outputpathname = '"' + outputpathname + '"'
                        res.update({'filename': file,
                                    'filepathname': filepathname,
                                    'outputpathname': outputpathname})
                        reslist.append(res.copy())
                        break
        return reslist


class Starthread(QThread):
    trigger = pyqtSignal(str)
    _signal = pyqtSignal()

    def __init__(self, commandstrlist, mode, filepath, subfiletype, parent=None):
        QThread.__init__(self, parent)
        self.commandstrlist = commandstrlist
        self.filepath = filepath
        self.mode = mode
        self.subfiletype = subfiletype

    '''
    :mode = 0: 刷机
    :mode = 1: 刷机并删除
    :mode = 2: 删除
    :mode = 3: 重命名
    '''
    def run(self):
        qmut_1.lock()
        if self.mode == 0 or self.mode == 1:
            self.trigger.emit("开始")
            count = len(self.commandstrlist)
            for i, command in enumerate(self.commandstrlist):
                self.trigger.emit("正在执行:{}/{}...\n".format(i+1, count))
                p = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True, stdin=subprocess.PIPE,
                                     stderr=subprocess.PIPE)
                for line in iter(p.stdout.readline, b''):
                    line = str(line, encoding="utf-8")
                    if '100%' in line:
                         self.trigger.emit("进度: 100%")
                    else:
                        self.trigger.emit(line)
            self.trigger.emit("已全部完成")
            if self.mode == 1:
                self.remove(self.filepath)
        elif self.mode == 2:
            self.remove(self.filepath)
        else:
            self.rename(self.commandstrlist)
        qmut_1.unlock()
        self._signal.emit()

    def remove(self, filepath):
        self.trigger.emit("正在执行删除和重命名")
        onlyfiles = [f for f in listdir(filepath) if isfile(join(filepath, f))]
        renamelist = []
        ass = []
        for file in onlyfiles:
            if "(1).mkv" in file:
                renamelist.append(file)
        for file in onlyfiles:
            if self.subfiletype in file:
                ass.append(file)
        if len(renamelist) != 0:
            self.trigger.emit('正在重命名...')
            for file in renamelist:
                removefile = file.replace(' (1)', '')
                try:
                    res = shell.SHFileOperation((0, shellcon.FO_DELETE, os.path.join(filepath, removefile), None,
                                                 shellcon.FOF_SILENT | shellcon.FOF_ALLOWUNDO | shellcon.FOF_NOCONFIRMATION,
                                                 None, None))
                except Exception as e:
                    print(e)
            for file in renamelist:
                removefile = file.replace(' (1)', '')
                self.trigger.emit(file + ' --> ' + removefile)
                try:
                    os.rename(os.path.join(filepath, file), os.path.join(filepath, removefile))
                except Exception as e:
                    print(e)
            self.trigger.emit('重命名完成')
        else:
            self.trigger.emit('无需要删除和重命名的文件！')
        if len(ass) != 0:
            self.trigger.emit('正在删除字幕...')
            for file in ass:
                self.trigger.emit(file)
                res = shell.SHFileOperation((0, shellcon.FO_DELETE, os.path.join(filepath, file), None,
                                             shellcon.FOF_SILENT | shellcon.FOF_ALLOWUNDO | shellcon.FOF_NOCONFIRMATION,
                                             None, None))
            self.trigger.emit('删除完成！')
        else:
            self.trigger.emit('无需要删除的字幕！')

    def rename(self, commandlist):
        self.trigger.emit('正在重命名...')
        for episodelist in commandlist:
            # self.trigger.emit('episodename: ' + episodelist)
            season = episodelist[2]
            # self.trigger.emit('season: '+season)
            episodepath = episodelist[1].strip('"')
            # self.trigger.emit('episodepath: ' + episodepath)
            episode = episodelist[3]
            # self.trigger.emit('episode: ' + episode)
            episodename = episodelist[0]
            # self.trigger.emit('episodename: ' + episodename)
            filepath = os.path.dirname(episodepath)
            # self.trigger.emit('filepath: ' + filepath)
            seasonpath = os.path.join(filepath, 'season' + ' ' + str(int(season)))
            # self.trigger.emit('seasonpath: ' + seasonpath)
            filename = episodepath.split("\\")[-1].replace('[', ' ').replace(']', ' ')
            # self.trigger.emit('filename: ' + filename)
            rename = '{} - S{}E{} - {}'.format(episodename, season, episode, filename)
            # self.trigger.emit('rename: ' + rename)
            renamepath = os.path.join(seasonpath, rename)
            # self.trigger.emit('renamepath: ' + renamepath)
            self.mkdir(seasonpath)
            self.trigger.emit(episodepath + ' --> ' + renamepath)
            os.rename(episodepath, renamepath)
        self.trigger.emit('重命名完成！')

    def mkdir(self, path):
        if not os.path.exists(path):
            os.mkdir(path)


# class Ui_Form(object):
#     def setupUi(self, Form):
#         Form.setObjectName("Form")
#         Form.resize(463, 437)
#         self.verticalLayout = QtWidgets.QVBoxLayout(Form)
#         self.verticalLayout.setObjectName("verticalLayout")
#         self.label = QtWidgets.QLabel(Form)
#         self.label.setObjectName("label")
#         self.verticalLayout.addWidget(self.label)
#         self.paratable = QtWidgets.QTableWidget(Form)
#         sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
#         sizePolicy.setHorizontalStretch(0)
#         sizePolicy.setVerticalStretch(0)
#         sizePolicy.setHeightForWidth(self.paratable.sizePolicy().hasHeightForWidth())
#         self.paratable.setSizePolicy(sizePolicy)
#         self.paratable.setObjectName("paratable")
#         self.paratable.setColumnCount(3)
#         self.paratable.setRowCount(0)
#         item = QtWidgets.QTableWidgetItem()
#         self.paratable.setHorizontalHeaderItem(0, item)
#         item = QtWidgets.QTableWidgetItem()
#         self.paratable.setHorizontalHeaderItem(1, item)
#         item = QtWidgets.QTableWidgetItem()
#         self.paratable.setHorizontalHeaderItem(2, item)
#         self.verticalLayout.addWidget(self.paratable)
#         self.horizontalLayout = QtWidgets.QHBoxLayout()
#         self.horizontalLayout.setContentsMargins(30, -1, 30, -1)
#         self.horizontalLayout.setSpacing(10)
#         self.horizontalLayout.setObjectName("horizontalLayout")
#         self.updateButton = QtWidgets.QPushButton(Form)
#         self.updateButton.setMinimumSize(QtCore.QSize(0, 30))
#         self.updateButton.setObjectName("updateButton")
#         self.horizontalLayout.addWidget(self.updateButton)
#         self.closeButton = QtWidgets.QPushButton(Form)
#         self.closeButton.setMinimumSize(QtCore.QSize(0, 30))
#         self.closeButton.setObjectName("closeButton")
#         self.horizontalLayout.addWidget(self.closeButton)
#         self.verticalLayout.addLayout(self.horizontalLayout)
#
#         self.retranslateUi(Form)
#         QtCore.QMetaObject.connectSlotsByName(Form)
#
#     def retranslateUi(self, Form):
#         _translate = QtCore.QCoreApplication.translate
#         Form.setWindowTitle(_translate("Form", "参数配置"))
#         self.label.setText(_translate("Form", "双击单元格进行编辑"))
#         item = self.paratable.horizontalHeaderItem(0)
#         item.setText(_translate("Form", "名称"))
#         item = self.paratable.horizontalHeaderItem(1)
#         item.setText(_translate("Form", "路径/参数"))
#         item = self.paratable.horizontalHeaderItem(2)
#         item.setText(_translate("Form", "备注"))
#         self.updateButton.setText(_translate("Form", "更新"))
#         self.closeButton.setText(_translate("Form", "关闭"))
#
#     def initUI(self):
#         self.paratable.setSelectionBehavior(QAbstractItemView.SelectRows)
#         self.paratable.setSelectionMode(QAbstractItemView.SingleSelection)
#         self.paratable.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
#         self.paratable.verticalHeader().setVisible(False)  # 隐藏列表头
#         self.updateButton.clicked.connect(self.updatefile)
#         self.closeButton.clicked.connect(self.closewindows)
#         self.paratable.cellClicked.connect(self.changebutton)
#         self.paratable.insertRow(0)
#         self.paratable.insertRow(1)
#         self.paratable.insertRow(2)
#         self.paratable.insertRow(3)
#         self.paratable.insertRow(4)
#         for index, i in enumerate(['ResearchDownload', 'Path', 'ResearchDownload路径', 'RootPac', 'Path', '取Pac包路径',
#                                    'HomePac', 'Path', '本地存放路径', 'keyword', 'keyword', '过滤pac包的关键词',
#                                    'BranchPath', 'Path', '分支根目录，分支名需运行adb shell getprop|findstr ro.build.host查看，替换“BranchPath”']):
#             item = QTableWidgetItem(i)
#             if index%3 == 0 or index%3 == 2:
#                 item.setFlags(Qt.ItemIsEnabled)
#                 self.ui.paratable.setItem(index/3, index%3, item)
#         try:
#             self.readconfig()
#         except:
#             pass
#
#     def closewindows(self):
#         self.ui.close()
#
#     def updatefile(self):
#         row = self.ui.paratable.rowCount()
#         configdict = {'ResearchDownload': {'path': ''},
#                       'RootPac': {'path': ''},
#                       'HomePac': {'path': ''},
#                       'keyword': {'keyword': ''},
#                       'BranchPath': {}}
#         configdict['ResearchDownload'].update({'path': self.ui.paratable.item(0, 1).text()})
#         configdict['RootPac'].update({'path': self.ui.paratable.item(1, 1).text()})
#         configdict['HomePac'].update({'path': self.ui.paratable.item(2, 1).text()})
#         configdict['keyword'].update({'keyword': self.ui.paratable.item(3, 1).text()})
#         BranchPathdict = {}
#         for i in range(4, row):
#             BranchPathdict[self.ui.paratable.item(i, 0).text()] = self.ui.paratable.item(i, 1).text()
#         configdict.update({'BranchPath': BranchPathdict})
#         f = open('config.ini', 'w')
#         for k, v in configdict.items():
#             f.writelines('[{}]\n'.format(k))
#             for k, h in v.items():
#                 f.writelines('{} = {}\n'.format(k, h))
#         f.close()
#         failpathlist = []
#         for k, v in configdict.items():
#             for k, h in v.items():
#                 if not os.path.exists(h):
#                     if not k == 'keyword':
#                         failpathlist.append(h)
#         if len(failpathlist) == 0:
#             MessageBox = QMessageBox.about(self.ui, 'Success', '      更新成功          ')
#         else:
#             failpath = ''
#             for i in failpathlist:
#                 failpath = failpath + i + '; '
#             QMessageBox.about(self.ui, 'Fail', '更新失败，请确认文件或文件夹是否存在：{}'.format(failpath))
#
#     def changebutton(self, row):
#         if row == 0 or row == 1 or row == 2 or row == 3:
#             self.ui.delButton.setEnabled(False)
#         else:
#             self.ui.delButton.setEnabled(True)
#
#     def readconfig(self):
#         cfg = MyParser()
#         cfg.read(cfgpath, "utf-8")
#         configdict = cfg.as_dict()
#         try:
#             self.ui.paratable.setItem(0, 1, QTableWidgetItem(configdict['ResearchDownload']['path']))
#             self.ui.paratable.setItem(1, 1, QTableWidgetItem(configdict['RootPac']['path']))
#             self.ui.paratable.setItem(2, 1, QTableWidgetItem(configdict['HomePac']['path']))
#             self.ui.paratable.setItem(3, 1, QTableWidgetItem(configdict['keyword']['keyword']))
#         except:
#             pass
#         for i in range(len(configdict['BranchPath'])-1):
#             self.ui.paratable.insertRow(5+i)
#         for i, k in enumerate (configdict['BranchPath']):
#             row = i + 4
#             self.ui.paratable.setItem(row, 0, QTableWidgetItem(k))
#             self.ui.paratable.setItem(row, 1, QTableWidgetItem(configdict['BranchPath'][k]))
#
#     # delete
#     def table_delete(self):
#         row_select = self.ui.paratable.selectedItems()
#         print(row_select)
#         if len(row_select) == 0:
#             return
#         id = row_select[0].text()
#         print("id: {}".format(id))
#         row = row_select[0].row()
#         self.ui.paratable.removeRow(row)
#         # 以下可以加入保存数据到数据的操作
#         '''
#         eg. delete from {table} where id = "id"
#         '''
#     def instert(self):
#         row = self.ui.paratable.rowCount()
#         self.ui.paratable.insertRow(row)
#         self.ui.paratable.setItem(row, 0, QTableWidgetItem('BranchPath'))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)  # 创建一个QApplication，也就是你要开发的软件app
    MainWindow = QtWidgets.QMainWindow()  # 创建一个QMainWindow，用来装载你需要的各种组件、控件
    ui = Ui_MainWindow()  # ui是Ui_MainWindow()类的实例化对象
    ui.setupUi(MainWindow)  # 执行类中的setupUi方法，方法的参数是第二步中创建的QMainWindow
    MainWindow.show()  # 执行QMainWindow的show()方法，显示这个QMainWindow
    sys.exit(app.exec_())
